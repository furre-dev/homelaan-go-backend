package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"

	"github.com/furre-dev/homelaan-gql/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	userProfile := &model.UserProfile{
		IndustryExpertise:       input.Profile.IndustryExpertise,
		GeographicPreference:    input.Profile.GeographicPreference,
		InvestmentAdvisoryStage: input.Profile.InvestmentAdvisoryStage,
		KeyStrengths:            input.Profile.KeyStrengths,
		RoleFocus: &model.RoleFocus{
			Role:       input.Profile.RoleFocus.Role,
			FocusAreas: input.Profile.RoleFocus.FocusAreas,
		},
		InvestmentRangeAdvisoryFee: &model.InvestmentSizeAdvisoryFee{
			InvestmentRange:       (*model.InvestmentRange)(input.Profile.InvestmentRangeAdvisoryFee.InvestmentRange),
			AdvisoryFeeUsdPerHour: input.Profile.InvestmentRangeAdvisoryFee.AdvisoryFeeUsdPerHour,
		},
		DealStructurePreferences: input.Profile.DealStructurePreferences,
		EngagementLevel: &model.EngagementLevel{
			Type:    input.Profile.EngagementLevel.Type,
			Details: input.Profile.EngagementLevel.Details,
		},
		NetworkAndValueAdd: &model.NetworkAndValue{
			Network:           input.Profile.NetworkAndValueAdd.Network,
			AdditionalSupport: input.Profile.NetworkAndValueAdd.AdditionalSupport,
		},
		SuccessMetrics: &model.SuccessMetrics{
			PrimaryMetrics:    input.Profile.SuccessMetrics.PrimaryMetrics,
			MeasurementMethod: input.Profile.SuccessMetrics.MeasurementMethod,
		},
	}

	newUser := &model.User{
		FullName: input.FullName,
		Email:    input.Email,
		Profile:  userProfile,
	}

	query := `
WITH inserted_user AS (
    INSERT INTO user_account (full_name, email)
    VALUES ($1, $2)
    RETURNING id
), inserted_profile AS (
    INSERT INTO user_profile (user_id, industry_expertise, geographic_preference, investment_advisory_stage, key_strengths)
    VALUES ((SELECT id FROM inserted_user), $3, $4, $5, $6)
    RETURNING id
)
INSERT INTO role_focus (user_profile_id, role, focus_areas)
VALUES ((SELECT id FROM inserted_profile), $7, $8);

INSERT INTO investment_range_advisory_fee (user_profile_id, from_usd, to_usd, advisory_fee_usd_per_hour)
VALUES ((SELECT id FROM inserted_profile), $9, $10, $11);

INSERT INTO deal_structure_preferences (user_profile_id, deal_preferences)
VALUES ((SELECT id FROM inserted_profile), $12);

INSERT INTO engagement_level (user_profile_id, type, details)
VALUES ((SELECT id FROM inserted_profile), $13, $14);

INSERT INTO network_and_value_add (user_profile_id, network, additional_support)
VALUES ((SELECT id FROM inserted_profile), $15, $16);

INSERT INTO success_metrics (user_profile_id, primary_metrics, measurement_method)
VALUES ((SELECT id FROM inserted_profile), $17, $18);
`
	err := r.DB.QueryRow(ctx, query, newUser.FullName, newUser.Email).Scan(&newUser.ID)
	if err != nil {
		return nil, err
	}

	return newUser, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return nil, nil
}
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }
type queryResolver struct{ *Resolver }
*/
