package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/furre-dev/homelaan-go-backend/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	userProfile := &model.InvestorProfile{
		RoleFocus:               (*model.RoleFocus)(input.InvestorProfile.RoleFocus),
		IndustryExpertise:       input.InvestorProfile.IndustryExpertise,
		GeographicPreference:    input.InvestorProfile.GeographicPreference,
		InvestmentAdvisoryStage: input.InvestorProfile.InvestmentAdvisoryStage,
		InvestmentRangeAdvisoryFee: &model.InvestmentRangeAndFee{
			InvestmentRange:       (*model.InvestmentRange)(input.InvestorProfile.InvestmentRangeAdvisoryFee.InvestmentRange),
			AdvisoryFeeUsdPerHour: input.InvestorProfile.InvestmentRangeAdvisoryFee.AdvisoryFeeUsdPerHour,
		},
		DealStructurePreferences: input.InvestorProfile.DealStructurePreferences,
		EngagementLevel:          (*model.EngagementLevel)(input.InvestorProfile.EngagementLevel),
		KeyStrengths:             input.InvestorProfile.KeyStrengths,
		NetworkAndValueAdd:       (*model.NetworkValueAdd)(input.InvestorProfile.NetworkAndValueAdd),
		SuccessMetrics:           input.InvestorProfile.SuccessMetrics,
	}

	userAttributes := &model.User{
		FullName:        input.FullName,
		Email:           input.Email,
		InvestorProfile: userProfile,
	}

	query := "INSERT INTO user_account (full_name, email, investor_profile) VALUES ($1, $2, $3) RETURNING id"
	err := r.DB.QueryRow(ctx, query, userAttributes.FullName, userAttributes.Email, userAttributes.InvestorProfile).Scan(&userAttributes.ID)
	if err != nil {
		return nil, err
	}

	return userAttributes, nil
}

// GetUserByID is the resolver for the getUserById field.
func (r *queryResolver) GetUserByID(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserByID - getUserById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}
*/
