package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"fmt"

	"github.com/furre-dev/homelaan-go-backend/graph/model"
	"github.com/furre-dev/homelaan-go-backend/utils"
	"github.com/furre-dev/homelaan-go-backend/utils/interview"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, userInput *model.UserInput) (*model.User, error) {
	/* var userProfile *model.InvestorProfile
	if userInput.InvestorProfile != nil {
		userProfile = utils.MapProfileInfoToUser(userInput.InvestorProfile)
	} */

	userAttributes := &model.User{
		ID:        userInput.ID,
		FirstName: userInput.FirstName,
		LastName:  userInput.LastName,
		Email:     userInput.Email,
		UserType:  userInput.UserType,
	}

	query := "INSERT INTO users (id, first_name, last_name, email, user_type) VALUES ($1, $2, $3, $4, $5) RETURNING id"
	err := r.DB.QueryRow(ctx, query,
		userAttributes.ID,
		userAttributes.FirstName,
		userAttributes.LastName,
		userAttributes.Email,
		userAttributes.UserType).Scan(&userAttributes.ID)
	if err != nil {
		return nil, err
	}

	return userAttributes, nil
}

// GenerateProfile is the resolver for the GenerateProfile field.
func (r *mutationResolver) GenerateProfile(ctx context.Context, answers []*model.QuestionInput) (*model.InvestorProfile, error) {
	generatedProfile, err := utils.GenerateUserProfile(answers)

	if err != nil {
		panic(err.Error())
	}

	return generatedProfile, nil
}

// GetQuestion is the resolver for the GetQuestion field.
func (r *queryResolver) GetQuestion(ctx context.Context, index *int32) (*model.Question, error) {
	user, err := utils.GetCurrentUserFromPostgres(ctx, r.DB)

	if err != nil {
		return nil, err
	}

	userType := user.UserType

	if userType == nil {
		return &interview.UserTypeQuestion, nil
	}

	// if there is no index provided, or if the index is 0, return the first question.
	if (index == nil) || (*index == 0) {
		question := interview.InvestorQuestions[0]

		return &model.Question{
			QuestionTitle:  question.QuestionTitle,
			ProfileField:   question.ProfileField,
			IsLastQuestion: false,
			QuestionIndex:  0,
		}, nil
	}

	questionsLength := int32(len(interview.InvestorQuestions))
	questionIsLast := *index == int32(questionsLength-1)

	if *index >= questionsLength {
		// Return an error if the nextMessage index is out of bounds
		return nil, fmt.Errorf("question with index %d not found, the largest index possible is %d", *index, (questionsLength - 1))
	}

	question := interview.InvestorQuestions[*index]

	return &model.Question{
		QuestionTitle:  question.QuestionTitle,
		ProfileField:   question.ProfileField,
		IsLastQuestion: questionIsLast,
		QuestionIndex:  *index,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
